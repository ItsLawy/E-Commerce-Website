
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("USER")
  posts     Post[]
  liked     Like[]
  disLiked  Dislike[]
  orders    Orders[]
  cart      Cart[]
  favorites Favorite[]
  address   Address[]
  rating    Float
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String
  products  Product  @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId String
  likes     Like[]
  dislikes  Dislike[]
 
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String
}
model Dislike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String
  products  Product[]
  postId    String
}

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User    @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String
  postId    String
  quantity  Int @default(1)
  products  Product[]
}


model Orders {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  products  Product[]
  firstName String @default("")
  lastName  String @default("")
  street    String
  city      String
  zip       String
  state     String
  phoneNumber String @default("")
  total    Float @default(0)
  status    OrderStatus @default(PENDING)
  
}

model Product {
  id        String   @id @default(cuid())
  name      String
  price     Float
  imagepath   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  available Boolean @default(true)
  description String
  productType String  
  orders   Orders[]
  post     Post []  
  cart     Cart[]
  favorites Favorite[]
  accrdation Accrdation[]
  ordersId  String
  rating    Float
}

model Accrdation {
  id        String   @id @default(cuid())
  name      String
  description String
  products  Product[]
}


model Address {
  id        String   @id @default(cuid())
  firstName String @default("")
  lastName  String @default("")
  street    String
  city      String
  zip       String
  phoneNumber String @default("")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String
}


enum OrderStatus {
  PENDING
  DELIVERED
  CANCELLED
}